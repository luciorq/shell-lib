#!/usr/bin/env bash

# Do NOT modify this file manually.
# Change source code at: https://github.com/luciorq/shell-lib
# Author: Lucio Rezende Queiroz
# License: MIT

builtin set -o errexit;    # abort on nonzero exitstatus
builtin set -o nounset;    # abort on unbound variable
builtin set -o pipefail;   # don't hide errors within pipes

[[ "${BASH_VERSINFO[0]}" -lt 4 ]] && { builtin echo >&2 "Error: Bash >=4 required"; exit 1; }

require () 
{ 
    local cmd_str;
    local cmd_bin;
    local cmd_res;
    local full_cmd;
    cmd_str="${1:-}";
    cmd_bin="$(which_bin "${cmd_str}")";
    if [[ -z ${cmd_bin} ]]; then
        exit_fun "'${cmd_str}' executable not found in '\${PATH}'";
        exit 1;
    fi;
    if [[ ${#} -eq 1 ]]; then
        cmd_res="$("${cmd_bin}" --version 2>&1 || builtin echo -ne '')";
        full_cmd="${cmd_bin} --version";
    else
        cmd_res="$("${cmd_bin}" "${@:2}" 2>&1 || builtin echo -ne '')";
        full_cmd="${cmd_bin} ${*:2}";
    fi;
    if [[ -n ${cmd_res} ]]; then
        builtin echo -ne "${cmd_bin}";
    else
        exit_fun "'${full_cmd}' can't be executed";
        exit 1;
    fi;
    exit 0
}
which_bin () 
{ 
    builtin local cmd_arg;
    builtin local cmd_arr;
    builtin local cmd_bin;
    builtin local which_arr;
    builtin local which_bin_str;
    cmd_arg="${1:-}";
    cmd_arr='';
    which_arr='';
    builtin mapfile -t which_arr < <(builtin command which -a 'which' 2> /dev/null || builtin echo -ne '');
    which_bin_str="${which_arr[0]}";
    if [[ -z ${which_bin_str} ]]; then
        builtin mapfile -t cmd_arr < <(builtin command -v "${cmd_arg}" 2> /dev/null || builtin echo -ne '');
    else
        builtin mapfile -t cmd_arr < <("${which_bin_str}" -a "${cmd_arg}" 2> /dev/null || builtin echo -ne '');
    fi;
    cmd_bin="${cmd_arr[0]:-}";
    builtin echo -ne "${cmd_bin}";
    builtin exit 0
}
exit_fun () 
{ 
    : builtin local Error && Error=' ' && builtin unset -v Error && "${Error:?$1}";
    builtin exit 1
}

function main () {
    require "${@}";
builtin exit 0;
}

main "${@}";
builtin exit 0;

