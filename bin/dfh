#!/usr/bin/env bash

# Do NOT modify this file manually.
# Change source code at: https://github.com/luciorq/shell-lib
# Author: Lucio Rezende Queiroz
# License: MIT

\builtin set -o errexit;    # abort on nonzero exitstatus
\builtin set -o nounset;    # abort on unbound variable
\builtin set -o pipefail;   # don't hide errors within pipes

[[ "${BASH_VERSINFO[0]}" -lt 4 ]] && { \builtin echo >&2 "Error: Bash >=4 required"; \builtin exit 1; }

function dfh ()
{
    \builtin local ls_bin;
    \builtin local df_bin;
    \builtin local grep_bin;
    \builtin local sed_bin;
    \builtin local column_bin;
    \builtin local glow_bin;
    \builtin local header_str;
    \builtin local align_str;
    \builtin local body_str;
    header_str="FS,Type,Size,Used,Available,Usage(%),MountPath\n";
    align_str="---,---,---,---,---,---,---\n";
    ls_bin="$(which_bin 'ls')";
    df_bin="$(which_bin 'df')";
    grep_bin="$(which_bin 'grep')";
    sed_bin="$(which_bin 'sed')";
    column_bin="$(which_bin 'column')";
    glow_bin="$(which_bin 'glow')";
    LC_ALL=C "${ls_bin}" -- /data/* /home 2> /dev/null > /dev/null || \builtin echo -ne '';
    body_str="$("${df_bin}" -h -T -x squashfs -x devtmpfs | "${grep_bin}" -v '/var/lib/docker/zfs' | "${grep_bin}" -v '^tmpfs.*[^scratch]$' | "${grep_bin}" -v '^Filesystem.*on$' | "${sed_bin}" -r 's/\s+/,/g')";
    if [[ -n ${glow_bin} ]]; then
        CLICOLOR_FORCE=1 builtin echo -ne "${header_str}${align_str}${body_str}\n" | bat_fun -l csv -pp --color=never | "${sed_bin}" 's/,/ | /g' | "${sed_bin}" 's/^/| /g' | "${sed_bin}" 's/$/ |/g' | "${column_bin}" -t | "${glow_bin}" -w 120;
    else
        CLICOLOR_FORCE=1 builtin echo -ne "${header_str}${align_str}${body_str}\n" | bat_fun -l csv -pp --color=always | "${sed_bin}" 's/,/ | /g' | "${sed_bin}" 's/^/| /g' | "${sed_bin}" 's/$/ |/g' | "${column_bin}" -t;
    fi;
    \builtin return 0
}

function which_bin ()
{
    \builtin local cmd_arg;
    \builtin local path_dir_arr;
    \builtin local path_dir;
    \builtin local file_name;
    \builtin local cmd_bin;
    cmd_arg="${1:-}";
    cmd_bin='';
    IFS=: \builtin read -r -a path_dir_arr <<< "${PATH:-}";
    for path_dir in "${path_dir_arr[@]}";
    do
        file_name="${path_dir}/${cmd_arg}";
        if [[ -x "${file_name}" && ! -d "${file_name}" ]] && [[ "${file_name}" =~ ${cmd_arg}$ ]]; then
            cmd_bin="${file_name}";
            \builtin break;
        fi;
    done;
    \builtin echo -ne "${cmd_bin}";
    \builtin return 0
}

function bat_fun ()
{
    builtin local bat_bin;
    builtin local cat_bin;
    builtin local bat_avail;
    bat_bin="$(which_bin 'bat')";
    if [[ -z ${bat_bin} ]]; then
        bat_bin="$(which_bin 'batcat')";
    fi;
    if [[ -n ${bat_bin} ]]; then
        bat_avail="$("${bat_bin}" -V 2> /dev/null > /dev/null || builtin echo -ne "${?}")";
    fi;
    cat_bin="$(which_bin 'cat')";
    if [[ -n ${bat_bin} && -z ${bat_avail} ]]; then
        "${bat_bin}" "${@}" --theme 'gruvbox-dark';
    else
        "${cat_bin}";
    fi;
    builtin return 0
}

function main () {
    dfh "${@:-}";
    \builtin return;
}

main "${@:-}";
\builtin exit;
