#!/usr/bin/env bash

# Do NOT modify this file manually.
# Change source code at: https://github.com/luciorq/shell-lib
# Author: Lucio Rezende Queiroz
# License: MIT

\builtin trap '\builtin echo "Exit status ${?} at line ${LINENO} from: ${BASH_COMMAND}"' ERR

\builtin set -o errexit;    # abort on nonzero exitstatus
\builtin set -o nounset;    # abort on unbound variable
\builtin set -o pipefail;   # do not hide errors within pipes

[[ "${BASH_VERSINFO[0]}" -lt 4 ]] && { \builtin echo >&2 "Error: Bash >=4 required"; \builtin exit 1; }

function ssha_fun ()
{
    local _usage="usage: ${0} <KEY_FILE_PATH>";
    unset _usage;
    local ssh_agent_bin;
    local ssh_add_bin;
    local ssha_args;
    local key_path;
    local os_type;
    key_path="${1}";
    ssh_agent_bin="$(require 'ssh-agent')";
    ssh_add_bin="$(require 'ssh-add')";
    declare -a ssha_args=();
    os_type="$(get_os_type)";
    if [[ ${os_type} == darwin ]]; then
        declare -a ssha_args=(--apple-use-keychain);
    fi;
    builtin eval "$("${ssh_agent_bin}")" && "${ssh_add_bin}" "${ssha_args[@]}" "${key_path}";
    return 0
}

function exit_fun ()
{
    : builtin local Error && Error=' ' && \builtin unset -v Error && "${Error:?$1}";
    \builtin exit 1
}

function get_os_type ()
{
    local os_type_str;
    local uname_bin;
    os_type_str="${OSTYPE}";
    uname_bin="$(which_bin 'uname')";
    if [[ -z ${os_type_str} ]]; then
        if [[ -n ${uname_bin} ]]; then
            os_type_str="$("${uname_bin}" -s)";
        else
            exit_fun "'uname' command not available";
        fi;
    fi;
    os_type_str="${os_type_str/[\-1-9]*/}";
    os_type_str="${os_type_str,,}";
    builtin echo -ne "${os_type_str}";
    return 0
}

function require ()
{
    local cmd_str;
    \builtin local cmd_bin;
    \builtin local cmd_res;
    \builtin local full_cmd;
    cmd_str="${1:-}";
    cmd_bin="$(which_bin "${cmd_str}")";
    if [[ -z ${cmd_bin} ]]; then
        exit_fun "'${cmd_str}' executable not found in '\${PATH}'";
        \builtin exit 1;
    fi;
    if [[ ${#} -eq 1 ]]; then
        cmd_res="$("${cmd_bin}" --version 2>&1 || \builtin echo -ne '')";
        full_cmd="${cmd_bin} --version";
    else
        cmd_res="$("${cmd_bin}" "${@:2}" 2>&1 || \builtin echo -ne '')";
        full_cmd="${cmd_bin} ${*:2}";
    fi;
    if [[ -n ${cmd_res} ]]; then
        \builtin echo -ne "${cmd_bin}";
    else
        exit_fun "'${full_cmd}' can't be executed";
        \builtin exit 1;
    fi;
    \builtin return 0
}

function which_bin ()
{
    \builtin local cmd_arg;
    \builtin local path_dir_arr;
    \builtin local path_dir;
    \builtin local file_name;
    \builtin local cmd_bin;
    cmd_arg="${1:-}";
    cmd_bin='';
    IFS=: \builtin read -r -a path_dir_arr <<< "${PATH:-}";
    for path_dir in "${path_dir_arr[@]}";
    do
        file_name="${path_dir}/${cmd_arg}";
        if [[ -x "${file_name}" && ! -d "${file_name}" ]] && [[ "${file_name}" =~ ${cmd_arg}$ ]]; then
            cmd_bin="${file_name}";
            \builtin break;
        fi;
    done;
    \builtin echo -ne "${cmd_bin}";
    \builtin return 0
}

function main () {
    ssha_fun "${@:-}";
    \builtin return;
}

main "${@:-}";
\builtin exit;
