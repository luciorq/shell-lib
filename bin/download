#!/usr/bin/env bash

# Do NOT modify this file manually.
# Change source code at: https://github.com/luciorq/shell-lib
# Author: Lucio Rezende Queiroz
# License: MIT

builtin set -o errexit;    # abort on nonzero exitstatus
builtin set -o nounset;    # abort on unbound variable
builtin set -o pipefail;   # don't hide errors within pipes

[[ "${BASH_VERSINFO[0]}" -lt 4 ]] && { builtin echo >&2 "Error: Bash >=4 required"; exit 1; }

download () 
{ 
    function download_usage () 
    { 
        builtin echo -ne "usage: download <URL> [<OUTPUT_DIR>] [<THREADS>]\n" 1>&2
    };
    if [[ ${#} -eq 0 ]]; then
        download_usage;
        unset download_usage;
        exit 1;
    fi;
    if [[ ${1:-} == '-h' ]]; then
        download_usage;
        unset download_usage;
        exit 0;
    fi;
    unset download_usage;
    local get_url;
    local dir_output;
    local thread_num;
    local output_filename;
    local output_basename;
    local realpath_bin;
    local wget_bin;
    local curl_bin;
    local aria_bin;
    local cache_path;
    get_url="${1:-}";
    dir_output="${2:-}";
    realpath_bin="$(require 'realpath')";
    if [[ -z ${dir_output} ]]; then
        dir_output="$("${realpath_bin}" ./)";
    fi;
    thread_num="$(get_nthreads '8')";
    if [[ ! -d ${dir_output} ]]; then
        "$(which_bin mkdir)" -p "${dir_output}";
    fi;
    output_basename="$(basename "${get_url}")";
    output_filename="${dir_output}/${output_basename}";
    cache_path="${XDG_CACHE_HOME:-${HOME}/.cache}";
    wget_bin="$(which_bin 'wget')";
    curl_bin="$(which_bin 'curl')";
    aria_bin="$(which_bin 'aria2c')";
    if [[ -n ${curl_bin} ]]; then
        "${curl_bin}" -f -s -S -L --create-dirs --insecure --silent -o "${output_filename}" -C - "${get_url}";
    else
        if [[ -n ${wget_bin} ]]; then
            cache_path="${cache_path}/wget/wget-hsts";
            "${wget_bin}" --continue -L -nv -q -np -nH --hsts-file="${cache_path}" --no-check-certificate --output-document="${output_filename}" "${get_url}";
        else
            if [[ -n ${aria_bin} ]]; then
                "${aria_bin}" --continue=true -s "${thread_num}" -x "${thread_num}" -j 1 -k 1M -d "${dir_output}" --out="${output_basename}" --quiet=true --check-integrity=true --check-certificate=false "${get_url}";
            else
                exit_fun 'No download method available';
                exit 1;
            fi;
        fi;
    fi;
    exit 0
}
which_bin () 
{ 
    builtin local cmd_arg;
    builtin local cmd_arr;
    builtin local cmd_bin;
    builtin local which_arr;
    builtin local which_bin_str;
    cmd_arg="${1:-}";
    cmd_arr='';
    which_arr='';
    builtin mapfile -t which_arr < <(builtin command which -a 'which' 2> /dev/null || builtin echo -ne '');
    which_bin_str="${which_arr[0]}";
    if [[ -z ${which_bin_str} ]]; then
        builtin mapfile -t cmd_arr < <(builtin command -v "${cmd_arg}" 2> /dev/null || builtin echo -ne '');
    else
        builtin mapfile -t cmd_arr < <("${which_bin_str}" -a "${cmd_arg}" 2> /dev/null || builtin echo -ne '');
    fi;
    cmd_bin="${cmd_arr[0]:-}";
    builtin echo -ne "${cmd_bin}";
    builtin exit 0
}
exit_fun () 
{ 
    : builtin local Error && Error=' ' && builtin unset -v Error && "${Error:?$1}";
    builtin exit 1
}
get_nthreads () 
{ 
    local nproc_bin;
    local lscpu_bin;
    local grep_bin;
    local num_threads;
    local half_threads;
    local max_threads_to_use;
    local threads_to_use;
    max_threads_to_use="${1:-8}";
    nproc_bin="$(which_bin 'nproc')";
    lscpu_bin="$(which_bin 'lscpu')";
    grep_bin="$(require 'grep')";
    if [[ -n ${nproc_bin} ]]; then
        num_threads="$("${nproc_bin}")";
    else
        if [[ -e /proc/cpuinfo ]]; then
            num_threads="$("${grep_bin}" -c 'processor' '/proc/cpuinfo')";
        else
            if [[ -n ${lscpu_bin} ]]; then
                num_threads="$("${lscpu_bin}" | "${grep_bin}" '^CPU(' | awk '{print $2}')";
            else
                builtin echo -ne "4";
                exit 0;
            fi;
        fi;
    fi;
    half_threads="$((num_threads/2))";
    threads_to_use="${half_threads}";
    if [[ ${threads_to_use} -gt ${max_threads_to_use} ]]; then
        threads_to_use="${max_threads_to_use}";
    fi;
    builtin echo -ne "${threads_to_use}";
    exit 0
}
require () 
{ 
    local cmd_str;
    local cmd_bin;
    local cmd_res;
    local full_cmd;
    cmd_str="${1}";
    cmd_bin="$(which_bin "${cmd_str}")";
    if [[ -z ${cmd_bin} ]]; then
        exit_fun "'${cmd_str}' executable not found in '\${PATH}'";
        exit 1;
    fi;
    if [[ ${#} -eq 1 ]]; then
        cmd_res="$("${cmd_bin}" --version 2>&1 || builtin echo -ne '')";
        full_cmd="${cmd_bin} --version";
    else
        cmd_res="$("${cmd_bin}" "${@:2}" 2>&1 || builtin echo -ne '')";
        full_cmd="${cmd_bin} ${*:2}";
    fi;
    if [[ -n ${cmd_res} ]]; then
        builtin echo -ne "${cmd_bin}";
    else
        exit_fun "'${full_cmd}' can't be executed";
        exit 1;
    fi;
    exit 0
}

function main () {
    download "${@}";
builtin exit 0;
}

main "${@}";
builtin exit 0;

